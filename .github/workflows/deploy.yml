name: ci-cd-automation-deploy
on:
  workflow_call:
    inputs:
      template_file_path:
        required: true
        description: Path to bicep template to deploy infrastructure.
        type: string
      workload:
        required: true
        description: Name of the workload
        type: string
      environment:
        required: true
        description: Environment to run this workflow
        type: string
      location:
        required: true
        description: Azure location to carry out deployment
        type: string
      instance_count:
        required: true
        description: Two digit instance count for azure resources
        type: string
      artifact-identifier:
        required: true
        description: release tag or workflow run number
        type: string
env:
  RESOURCE_GROUP_NAME: rg-${{ inputs.workload }}-${{ inputs.environment }}
  APP_NAME: app-fbitn-${{ inputs.workload }}-${{ inputs.environment }}-${{ inputs.location }}-${{ inputs.instance_count }}
  APP_FOLDER: app
  REPOSITORY_URL: https://github.com/sriramrakshithkolar/ci-cd-automation

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    environment: ${{ inputs.environment }}
    # deployment is triggered when:
    # 1. Automated build is successful
    # 2. Deployment is run manually
    # 3. Deployment is schedule
    if:
      ${{ github.event_name == 'workflow_run' ||
      github.event_name == 'workflow_dispatch' }}
    steps:
      # this a temp action. Need to find a way to do this at setup or teardown in global fashion
      - name: Cleanup files left from previous deploys
        run: rm -rf ./* || true
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      # getting latest built artifacts from main branch, when no build Id is available
      - name: Downloading artifacts by build ID
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: build.yml
          run_id: ${{ inputs.artifact-identifier }}            
      - name: Login to Azure
        uses: azure/login@v2
        with:
            client-id: ${{ vars.CLIENT_ID }}
            tenant-id: ${{ vars.TENANT_ID }}
            subscription-id: ${{ vars.SUBSCRIPTION_ID }}
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Validating Azure infrastructure
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ${{inputs.template_file_path }}
          parameters: environment=${{ inputs.environment }} workload=${{ inputs.workload }} deploymentIdentity=${{ vars.CLIENT_ID }}
          deploymentmode: Validate
          scope: resourcegroup
          failOnStdErr: false
      - name: Deploying Azure infrastructure
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ${{inputs.template_file_path }}
          parameters: environment=${{ inputs.environment }} workload=${{ inputs.workload }} deploymentIdentity=${{ vars.CLIENT_ID }}
          deploymentmode: Incremental
          scope: resourcegroup
          failOnStdErr: false
      ### Deploying the web application
      - name: Deploying application to app service
        run: az webapp deploy -n ${{ env.APP_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} --src-path ./${{env.APP_FOLDER}}.zip --clean true --restart true --type zip --debug --async